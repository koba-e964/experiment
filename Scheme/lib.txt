(define abs
	(lambda (x) (if (< x 0) (- x) x)
	)
)
(define list
	(lambda varargs varargs)
)
(define zero? (lambda (x) (= x 0)))
(define positive? (lambda (x) (> x 0)))
(define negative? (lambda (x) (< x 0)))
(define odd? (lambda (x) (= 1 (modulo x 2))))
(define even? (lambda (x) (= 0 (modulo x 2))))


(define list? (lambda (ls)
	(if (null? ls) #t
		(if (pair? ls) (list? (cdr ls)) #f)
	)
))
(define length (lambda (ls)
	(if (null? ls) 0
		(+ 1 (length (cdr ls)))
	)
))

(define lib-local-append2 (lambda (ls1 ls2)
	(if (null? ls1) ls2
		(cons (car ls1) (lib-local-append2 (cdr ls1) ls2))
	)
))
(define lib-local-append (lambda (lss)
	(if (null? lss) (quote ())
		(if (null? (cdr lss)) (car lss)
			(lib-local-append2 (car lss) (lib-local-append (cdr lss)))
		)
	)
))
(define append (lambda lss
	(lib-local-append lss)
))
(define lib-local-reverse-sub (lambda (x y)
	(if (null? x) y
		(lib-local-reverse-sub (cdr x) (cons (car x) y))
	)
))
(define reverse (lambda (ls) (lib-local-reverse-sub ls (quote ()))))

(define list-tail (lambda (ls k)
	(if (= k 0) ls
		(list-tail (cdr ls) (- k 1))
	)
))
(define list-ref (lambda (ls k) (car (list-tail ls k))))

(define mem-general (lambda (eq obj ls)
	(if (null? ls) #f
		(if (eq obj (car ls)) ls
			(mem-general eq obj (cdr ls))
		)
	)
))
(define memq (lambda (obj ls) (mem-general eq? obj ls)))
(define memv (lambda (obj ls) (mem-general eqv? obj ls)))
(define member (lambda (obj ls) (mem-general equal? obj ls)))
(define assoc-general (lambda (eq obj ls)
	(if (null? ls) #f
		(if (eq obj (car (car ls))) (car ls) (assoc-general eq obj (cdr ls)))
	)
))
(define assq (lambda (obj alist) (assoc-general eq? obj alist)))
(define assv (lambda (obj alist) (assoc-general eqv? obj alist)))
(define assoc (lambda (obj alist) (assoc-general equal? obj alist)))


(define (abs x) (if (< x 0) (- x) x))
(define (list . ls) ls)
(define (zero? x) (= x 0))
(define (positive? x) (> x 0))
(define (negative? x) (< x 0))
(define (odd? x) (= 1 (modulo x 2)))
(define (even? x) (= 0 (modulo x 2)))


(define (list? ls)
	(if (null? ls) #t
		(if (pair? ls) (list? (cdr ls)) #f)
	)
)
(define (length ls)
	(if (null? ls) 0
		(+ 1 (length (cdr ls)))
	)
)

(define (lib-local-append2 ls1 ls2)
	(if (null? ls1) ls2
		(cons (car ls1) (lib-local-append2 (cdr ls1) ls2))
	)
)
(define (lib-local-append lss)
	(if (null? lss) (quote ())
		(let ( (x (car lss)) (y (cdr lss)) )
			(if (null? y) x
				(lib-local-append2 x (lib-local-append y))
			)
		)
	)
)
(define (append . lss) (lib-local-append lss))
(define (lib-local-reverse-sub x y)
	(if (null? x) y
		(lib-local-reverse-sub (cdr x) (cons (car x) y))
	)
)
(define (reverse ls) (lib-local-reverse-sub ls (quote ())))

(define (list-tail ls k)
	(if (= k 0) ls
		(list-tail (cdr ls) (- k 1))
	)
)
(define (list-ref ls k) (car (list-tail ls k)))

(define (mem-general eq obj ls)
	(if (null? ls) #f
		(if (eq obj (car ls)) ls
			(mem-general eq obj (cdr ls))
		)
	)
)
(define (memq obj ls) (mem-general eq? obj ls))
(define (memv obj ls) (mem-general eqv? obj ls))
(define (member obj ls) (mem-general equal? obj ls))
(define (assoc-general eq obj ls)
	(if (null? ls) #f
		(let ((t (car ls)))
			(if (eq obj (car t)) t (assoc-general eq obj (cdr ls)))
		)
	)
)
(define (assq obj alist) (assoc-general eq? obj alist))
(define (assv obj alist) (assoc-general eqv? obj alist))
(define (assoc obj alist) (assoc-general equal? obj alist))

